
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000204  00000000  00000000  000000eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ff  00000000  00000000  000002ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000133  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d4  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000058  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000f0  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	13 c0       	rjmp	.+38     	; 0x58 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
#include <util/delay.h>


int main(int argc, char *argv[]){

DDRB |= _BV(PB0);
  34:	b8 9a       	sbi	0x17, 0	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  36:	48 ec       	ldi	r20, 0xC8	; 200
  38:	50 e0       	ldi	r21, 0x00	; 0



	while(1){
	
		PORTB &= ~_BV(PB0);
  3a:	20 eb       	ldi	r18, 0xB0	; 176
  3c:	34 e0       	ldi	r19, 0x04	; 4
  3e:	c0 98       	cbi	0x18, 0	; 24
  40:	80 ed       	ldi	r24, 0xD0	; 208
  42:	97 e0       	ldi	r25, 0x07	; 7
  44:	fa 01       	movw	r30, r20
  46:	31 97       	sbiw	r30, 0x01	; 1
  48:	f1 f7       	brne	.-4      	; 0x46 <__SREG__+0x7>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  4c:	d9 f7       	brne	.-10     	; 0x44 <__SREG__+0x5>
		
		_delay_us(200000);
		
		PORTB |= _BV(PB0);
  4e:	c0 9a       	sbi	0x18, 0	; 24
  50:	c9 01       	movw	r24, r18
  52:	01 97       	sbiw	r24, 0x01	; 1
  54:	f1 f7       	brne	.-4      	; 0x52 <__SREG__+0x13>
  56:	f3 cf       	rjmp	.-26     	; 0x3e <__SP_H__>

00000058 <_exit>:
  58:	f8 94       	cli

0000005a <__stop_program>:
  5a:	ff cf       	rjmp	.-2      	; 0x5a <__stop_program>
